/* File: Assignment6JavaScript.JS
 
 91.461 GUI Programming 1, Assignment 8: Form Validation and Dynamic Tabs.
 David Lordan, UMass Lowell Computer Science, david_lordan@student.uml.edu
 Alternate email: davidlordan@gmail.com
 Created on Oct 16, 2014 11:26 AM, updated on November 26nd, 2014 3:15 PM
 
 The purpose of this assignment is to update our assignment 6 to incorporate
 form validation and multiple tabs. Assignment 6 was to dynamically create a 
 multiplication table using user inputs. This extends that assignment by 
 implementing validation through the jQuery validation plugin. Also, the 
 jQuery UI tabs widget is used to allow multiple tables to be created and 
 accessible at a time. Each table may be closed individually or in groups
 which are selected via checkboxes. 
 
 The page is also stylized using CSS, demonstrating skills that have been
 learned throughout the course. 
 
 */


// Creates an array of strings identifying each of the user inputs. This is used in
// the 'clearPage' function.  
var names = ["first", "second", "third", "fourth"];

// Global variable used to create new table names and ids. 
var tableName = 0;


// Function to clear all fields, reset validation, remove error messages and reset tableName.
// Also removes all tabs and makes the tab invisible untill the next tab is created. 
function resetPage() {


    // Removes any error messages not generated by the jQuery validation. 
    $("#userInfo").html("");

    // Resets validation. 
    $("#frm").validate().resetForm();

    // Clears each text field. 
    for (var i = 0; i < names.length; i++) {
        frm[names[i] + "Int"].value = "";
    }

    // Hides the #tabs div. This is so that an unsightly empty table is not displayed. 
    $("#tabs").hide();

    // Deletes each tab. 
    while ($("div#tabs ul li").length > 0) {
        $("#tabs").find(".ui-tabs-nav li:eq(" + 0 + ")").remove();
    }

    // Deletes each of the divs selected by each tab. This has no affect on
    // the display, but helps when inspecting the page's elements. Prevents the
    // tab divs from 'building-up'.
    for (var i = 1; i <= tableName; i++) {
        $("#tabs #tab" + i + "").remove();
    }

    // Removes all checkboxes and the checkbox button. 
    $("#checkBoxes").html("");
    $("#delSelection").html("");

    // Resets tableName
    tableName = 0;

} //End clearPage.


// Function to cear all text fields and reset the validation. 
function clearInput() {
    // Resets validation and removes any error messages. 
    $("#frm").validate().resetForm();
    $("#userInfo").html("");

    // Clears all text fields. 
    for (var i = 0; i < names.length; i++) {
        frm[names[i] + "Int"].value = "";
    }
}


// Function to remove the tabs selected by the check boxes. 
function removeSelected() {

    // Remove 'Too Many Tabs' error message.
    $("#userInfo").html("");


    // An array which will store the id number of each tab that is to be removed.
    var tabsToRemove = [];



    // Creates a string of all of the selectd checkboxes. 
    var thisText = $('input:checked').next('label').text();



    // Loop to extract each of the id numbers from the selected check boxes. Adds
    // each id number to the 'tabsToRemove' array. 
    while (thisText !== "") {
        thisText = thisText.replace("Table ", "");

        if (!isNaN(thisText[1])) {
            var tempIndex = thisText[0] + thisText[1];
            tabsToRemove.push(tempIndex);
            thisText = thisText.slice(2);
        }
        else {
            tabsToRemove.push(thisText[0]);
            thisText = thisText.slice(1);
        }
    }


    // Loop to remove each tab referenced in the 'tabsToRemove' array. Should be
    // factored into above while loop in future versions. 
    for (var i = 0; i < tabsToRemove.length; i++) {
        $("#tabs #tabHeader" + tabsToRemove[i] + "").remove();
        $("#check" + tabsToRemove[i] + "").remove();
    }


    // Hides tabs and empties checkbox div if all tabs are removed. 
    if ($("div#tabs ul li").length === 0) {
        $("#tabs").hide();
        $("#checkBoxes").html("");
        $("#delSelection").html("");
    }

    $("div#tabs").tabs("refresh");

} //End of 'removeSelected' function. 


// Function to remove a tab individually.
function removeTab() {

    // Removes 'Too Many Tabs' error. 
    $("#userInfo").html("");

    // Hides tabs and empties checkbox div if the last tab is removed. 
    if ($("div#tabs ul li").length === 1) {
        $("#tabs").hide();
        $("#checkBoxes").html("");
        $("#delSelection").html("");
    }

    // Gets the index of the currently active tab. 
    var active = $("#tabs").tabs('option', 'active');


    // Gets the id of the active tab. 
    var thisTab = $(".ui-state-active").attr("id");
    thisTab = thisTab.replace("tabHeader", "");

    // Removes the check box associated with the active tab. 
    $("#check" + thisTab + "").remove();

    //Removes active tab.
    $("#tabs").find(".ui-tabs-nav li:eq(" + active + ")").remove();

    $("div#tabs").tabs("refresh");

} //End of 'removeTab' function.


// Function to add checkboxes with each tab. 
function addCheckBox() {

    // If there are currently no tabs, the check box header is added. 
    if ($("div#tabs ul li").length === 0) {
        var chkString = "<div class='remInst'>Tabs to remove: </div>";
        $("#checkBoxes").append(chkString);
    }

    // Adds a checkbox to be associated with the tab also being added. 
    var chkString = "<div id='check" + (tableName + 1) + "' class='chkBox'><input id='chk" + (tableName + 1) + "'type='checkbox' onclick='showChecked(" + (tableName + 1) + ")'><label for='check1'>Table " + (tableName + 1) + "</label></div>";
    $("#checkBoxes").append(chkString);

    // If there are currently no tabs, the 'Remove Selection' button is added.
    if ($("div#tabs ul li").length === 0) {
        $("#delSelection").append("<input type='button' onclick='removeSelected()' value='Remove Selection'>");
    }
}


// Adds the 'checked' class to any tab selected by a checkbox. This class changes
// the tab color to red. 
function showChecked(id) {

    if ($("#chk" + id + "").prop('checked')) {
        $("#tabHeader" + id + "").addClass("checked");
    }
    else {
        $("#tabHeader" + id + "").removeClass("checked");
    }
}


// Function to add a tab with a table of products dynamically. 
function addTab() {
    $("#tabs").show();

    // Checks that the number of tabs has not reached the maximum value of 10.
    if ($("div#tabs ul li").length < 10) {

        // Adds a new checkBox to be associated with the new tab.
        addCheckBox();
        tableName++;
        var numOfTabs = $("div#tabs ul li").length;

        // Gets the values from the text fields.
        n1 = parseInt(frm.firstInt.value);
        n2 = parseInt(frm.secondInt.value);
        n3 = parseInt(frm.thirdInt.value);
        n4 = parseInt(frm.fourthInt.value);


        // Creates a new tab based on the values in the text field. 
        $("div#tabs ul").append(
                "<li id='tabHeader" + tableName + "'><a href='#tab" + tableName
                + "'>Table " + tableName + ": (" + n1 + " to " + n2 + ") * (" +
                n3 + " to " + n4 + ")</a></li>"
                );
        $("div#tabs").append(
                "<div id='tab" + tableName + "'><div id='table" + tableName
                + "'></div></div>"
                );

        // Refreshes the tabs and sets the new tab to be active. 
        $("div#tabs").tabs("refresh");
        $("#tabs").tabs({active: numOfTabs});



        // Creates a new product table with the values in the text field. 
        createTable(n1, n2, n3, n4);
    }
    // Displays an error message to the user if too many tables are open. 
    else {
        $("#userInfo").html("There are too many open tabs. Please close some or click 'RESET' before adding more.");
    }
}//End of 'addTab' function.


// Function to create the multiplcation table. 
function createTable(Int1, Int2, Int3, Int4) {
    //If the upper bound is less than the lower bound, they are swapped. 
    var temp;
    if (Int1 > Int2) {
        temp = Int1;
        Int1 = Int2;
        Int2 = temp;
    }
    if (Int3 > Int4) {
        temp = Int3;
        Int3 = Int4;
        Int4 = temp;
    }

    frm.firstInt.value = Int1;
    frm.secondInt.value = Int2;
    frm.thirdInt.value = Int3;
    frm.fourthInt.value = Int4;

    // Creates an empty string 'strTable' which will gradually become the html
    // code for the table. 
    var strTable = "";

    // Starts to create the table's html code. A table tag and top row are added
    // and given ids to help with the CSS. Also creates an empty item in the top
    // left of the table which will be blened into the background. 
    strTable += "<table id='productTable'><tr id='multiplier'><td id='corner'><input type='button' class='removeTab' onclick='removeTab()' value='X'></td>";

    // For loop which takes the first and second integers and creates a row of
    // multipliers which will be the top row of the table. 
    for (var i = Int1; i <= Int2; i++) {
        strTable += "<td>" + i + "</td>";
    }

    // Pair of nested for loops, the first creates the far left column, containing
    // the multiplicands and the second loop creates each of the products.
    for (var j = Int3; j <= Int4; j++) {

        strTable += "<tr><td class='multiplicand'>" + j + "</td>";

        for (var i = Int1; i <= Int2; i++) {
            strTable += "<td><span class='products'>" + j * i + "</span></td>";
        }
        strTable += "</tr>";
    }

    // Adds the closing table tag to strTable.
    strTable += "</table>";


    var specificTable = "#table" + tableName + "";
    jQuery(specificTable).html(strTable);

}   //End of 'createTable' function. 
